name: Build and Deploy Changed Packages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # The turbo filter here varies depending on if we're using this workflow in a PR or on a push to a branch
      # For PRs, we want to use `github.event.pull_request.base.sha` to tell turbo to see which packages changed since that SHA
      # For a branch push/merges, the above sha isn't available, so instead, we reference `github.event.before` to determine the previous `HEAD` of the branch we just pushed onto
      #   See SO answer for more info https://stackoverflow.com/a/61861763/2379922
      TURBO_REF_FILTER: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --force

      - name: Cache Turborepo
        uses: actions/cache@v2
        with:
          path: |
            .turbo
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Changeset
        id: changeset
        run: |
          CHANGES=$(npx -y turbo build --dry-run=json --filter=...[$TURBO_REF_FILTER] --global-deps=.github/*)
          echo "result=$CHANGES" >> $GITHUB_ENV

      - name: Output changed packages
        id: output-changed-packages
        run: |
          CHANGES=${{ env.result }}
          CHANGED_PACKAGES=$(echo "$CHANGES" | jq -c '.packages')
          echo "changed_packages=$CHANGED_PACKAGES" >> $GITHUB_ENV
          echo 'changed_packages<<CHANGED_PACKAGES_DELIMITER' >> $GITHUB_OUTPUT
          echo "$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo 'CHANGED_PACKAGES_DELIMITER' >> $GITHUB_OUTPUT

      - name: Deploy to production
        if: steps.changeset.outputs.result != ''
        run: /deploy-to-prod.sh ${{ steps.output-changed-packages.outputs.changed_packages }}
